#!/usr/bin/env php
<?php

declare(strict_types=1);

require __DIR__ . '/../vendor/autoload.php';


echo renderConfig(
    anchorElementSelectors: __DIR__ . '/data/AnchorElementSelectors.csv',
    supportItems: __DIR__ . '/data/SupportItems.csv',
    categoryItems: __DIR__ . '/data/CategoryItems.csv',
    categoryPages: __DIR__ . '/data/CategoryPages.csv',
    configTemplate: __DIR__ . '/template/config.template.js'
);


/**
 * @param string $anchorElementSelectors
 * @param string $supportItems
 * @param string $categoryItems
 * @param string $categoryPages
 * @param string $configTemplate
 * @return string
 */
function renderConfig(
    string $anchorElementSelectors,
    string $supportItems,
    string $categoryItems,
    string $categoryPages,
    string $configTemplate
): string {
    $config = [
        'ANCHOR_ELEMENT_SELECTORS' => getAnchorElementSelectors($anchorElementSelectors),
        'SUPPORT_ITEMS' => getSupportItems($supportItems),
        'HELP_ITEM_CATEGORIES' => getHelpItemCategories(
            $categoryItems,
            $categoryPages
        ),
    ];

    return str_replace(
        array_keys($config),
        array_values($config),
        getConfigTemplate($configTemplate)
    );
}



/**
 * @param string $path
 * @return string
 */
function getAnchorElementSelectors(string $path): string
{

    $outputBuffer = [];

    $f = fopen($path, 'r');
    if (!is_resource($f)) {
        throw new \RuntimeException("Unable to open file: {$path}");
    }

    try {
        fgetcsv($f);

        while (!feof($f)) {
            /** @var string[]|false|null $row */
            $row = fgetcsv($f);
            if (!is_array($row) || count($row) < 3) {
                break;
            }
            list(, $uri, $selector) = $row;
            if (!($selector === "" || $selector === "null")) {
                $selector = "\"{$selector}\"";
            }

            $outputBuffer[] = '{' . implode(", ", [
                "uri: \"{$uri}\"",
                "selector: {$selector}"
            ]) . '}';
        }
    } finally {
        fclose($f);
    }

    return implode(", ", $outputBuffer);
}


/**
 * @param string $path
 * @return string
 */
function getSupportItems(string $path): string
{
    $outputBuffer = [];

    $f = fopen($path, 'r');
    if (!is_resource($f)) {
        throw new \RuntimeException("Unable to open file: {$path}");
    }

    try {
        fgetcsv($f);

        while (!feof($f)) {
            /** @var string[]|false|null $row */
            $row = fgetcsv($f);
            if (!is_array($row) || count($row) < 3) {
                break;
            }
            list(, $title, $url) = $row;
            $outputBuffer[] = '{' . implode(", ", [
                "title: \"{$title}\"",
                "url: \"{$url}\""
            ]) . '}';
        }
    } finally {
        fclose($f);
    }

    return implode(", ", $outputBuffer);
}



/**
 * @param string $categoryItems
 * @param string $categoryPages
 * @return string
 */
function getHelpItemCategories(
    string $categoryItems,
    string $categoryPages
): string {
    /** @var array<string,array{category:string,items:string[],pages:string[]}> */
    $helpItemCategories = [];

    $f = fopen($categoryItems, 'r');
    if (!is_resource($f)) {
        throw new \RuntimeException("Unable to open file: {$categoryItems}");
    }

    try {
        fgetcsv($f);

        while (!feof($f)) {
            /** @var string[]|false|null $row */
            $row = fgetcsv($f);
            if (!is_array($row) || count($row) < 3) {
                break;
            }
            list($category,, $title, $url) = $row;
            if (strlen($category) < 1) {
                break;
            }
            if (!isset($helpItemCategories[$category])) {
                $helpItemCategories[$category] = [
                    "category" => $category,
                    "items" => [],
                    "pages" => []
                ];
            }

            $helpItemCategories[$category]['items'][] = '{' . implode(", ", [
                "title: \"{$title}\"",
                "url: \"{$url}\""
            ]) . '}';
        }
    } finally {
        fclose($f);
    }


    $f = fopen($categoryPages, 'r');
    if (!is_resource($f)) {
        throw new \RuntimeException("Unable to open file: {$categoryPages}");
    }

    try {
        fgetcsv($f);

        while (!feof($f)) {
            $row = fgetcsv($f);
            if (!is_array($row) || count($row) < 5) {
                break;
            }
            // Category,Page Title,Page URL,Page URI,Regex Pattern
            list($category,,,, $regex) = $row;
            if (strlen($category) < 1) {
                break;
            }
            if (!isset($helpItemCategories[$category])) {
                $helpItemCategories[$category] = [
                    "category" => $category,
                    "items" => [],
                    "pages" => []
                ];
            }

            $helpItemCategories[$category]['pages'][$regex] = "\"{$regex}\"";
        }
    } finally {
        fclose($f);
    }

    return implode(", ", array_map(
        fn ($helpItemCategory) => '{' . implode(", ", [
            "category: \"" . $helpItemCategory['category'] . "\"",
            "items: [" . implode(", ", $helpItemCategory['items']), "]",
            "pages: [" . implode(", ", $helpItemCategory['pages']), "]",
        ]) . '}',
        $helpItemCategories
    ));
}


/**
 * @param string $path
 * @return string
 */
function getConfigTemplate(string $path): string
{
    $configTemplate = file_get_contents($path);
    return is_string($configTemplate)
        ? $configTemplate
        : throw new \RuntimeException("Unable to open file: {$path}");
}
